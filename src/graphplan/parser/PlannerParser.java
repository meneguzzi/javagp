/* Generated By:JavaCC: Do not edit this line. PlannerParser.java */
package graphplan.parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import graphplan.domain.DomainDescription;
import graphplan.domain.Operator;
import graphplan.domain.Proposition;
import graphplan.domain.jason.OperatorImpl;
import graphplan.domain.jason.PropositionImpl;
import graphplan.flyweight.OperatorFactory;
import graphplan.flyweight.PropositionFactory;

import jason.asSyntax.*;
import jason.asSyntax.ArithExpr.ArithmeticOp;

@SuppressWarnings("unchecked")
public class PlannerParser implements PlannerParserConstants {
        protected OperatorFactory operatorFactory;
        protected PropositionFactory propositionFactory;
        protected DomainDescription domainDescription;
        protected String source = null;

        public PlannerParser(){
                this(System.in);
                operatorFactory = OperatorFactory.getInstance();
                propositionFactory = PropositionFactory.getInstance();
        }

        /**
	 * Parses a planning problem from files containing operators and 
	 * problem a description.
	 *
	 * @param operators A file containing the domain operators
	 * @param problem   A file containing the planning problem
	 * 
	 */
        public DomainDescription parseProblem(File operators, File problem) throws FileNotFoundException, ParseException {
                List<Operator> ops = null;
                try {
                        source = operators.getPath();
                        ops = parseOperators(new FileInputStream(operators));
                } catch (ParseException e) {
                        String message = e.getMessage();
                        throw new ParseException(operators.getName()+": "+message);
                }

                DomainDescription domain = null;
                try {
                        source = problem.getPath();
                        domain = parseDomain(new FileInputStream(problem));
                } catch(ParseException e) {
                        String message = e.getMessage();
                        throw new ParseException(problem.getName()+": "+message);
                }

                domain.setOperators(ops);

                return domain;
        }

        public List<Operator> parseOperators(InputStream operators) throws ParseException {
                this.ReInit(operators);

                List<Operator> ops = new ArrayList<Operator>(operators());

                return ops;
        }

        public DomainDescription parseDomain(InputStream problem) throws ParseException {
                DomainDescription domain = null;

                this.ReInit(problem);

                List<Proposition> start = new ArrayList<Proposition>(start());

                List<Proposition> goal = new ArrayList<Proposition>(goal());

                domain = new DomainDescription(start, goal);

                return domain;
        }

        public DomainDescription parseProblem(InputStream operators, InputStream problem) throws ParseException {
                DomainDescription domain = null;

                this.ReInit(operators);

                List<Operator> ops = new ArrayList<Operator>(operators());

                this.ReInit(problem);

                List<Proposition> start = new ArrayList<Proposition>(start());

                List<Proposition> goal = new ArrayList<Proposition>(goal());

                domain = new DomainDescription(ops, start, goal);

                return domain;
        }

  final public List<OperatorImpl> operators() throws ParseException {
                                  List<OperatorImpl> ops = new ArrayList<OperatorImpl>();
                                                                  OperatorImpl op;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_OPERATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      op = operator();
                                                 ops.add(op);
    }
                                                                 {if (true) return ops;}
    throw new Error("Missing return statement in function");
  }

  final public OperatorImpl operator() throws ParseException {
                           Pred p;
                                                Structure s;
                                           List<Proposition> preconds;
                                           List<Proposition> effects;
    jj_consume_token(TK_OPERATOR);
    p = pred();
                                                                 s = new Structure(p);
    jj_consume_token(TK_PRE);
    jj_consume_token(32);
    preconds = propositions();
    jj_consume_token(TK_POST);
    jj_consume_token(32);
    effects = propositions();
                                                                                         {if (true) return new OperatorImpl(s,preconds,effects);}
    throw new Error("Missing return statement in function");
  }

  final public List<Proposition> start() throws ParseException {
                             List<Proposition> start;
    jj_consume_token(TK_START);
    jj_consume_token(33);
    start = propositions();
    jj_consume_token(34);
                                                         {if (true) return start;}
    throw new Error("Missing return statement in function");
  }

  final public List<Proposition> goal() throws ParseException {
                            List<Proposition> goal;
    jj_consume_token(TK_GOAL);
    jj_consume_token(33);
    goal = propositions();
    jj_consume_token(34);
                                                         {if (true) return goal;}
    throw new Error("Missing return statement in function");
  }

  final public List<Proposition> propositions() throws ParseException {
                                    List<Proposition> props = new ArrayList<Proposition>();
                                                                          PropositionImpl p;
    if (jj_2_1(4)) {
      jj_consume_token(TK_TRUE);
                                         {if (true) return props;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case ATOM:
        p = proposition();
                                                 props.add(p);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 35:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(35);
          p = proposition();
                                         props.add(p);
        }
                                                         {if (true) return props;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PropositionImpl proposition() throws ParseException {
                                 Literal l;
    l = literal();
                                                         {if (true) return (PropositionImpl) propositionFactory.getProposition(l.toString());}
    throw new Error("Missing return statement in function");
  }

/* The next elements were adapted from Jason */

/* Literal */
  final public Literal literal() throws ParseException {
                       Pred F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      F = pred();
                                {if (true) return new LiteralImpl(type,F);}
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Pred pred() throws ParseException {
                      Token K; Pred p; Term t; List l; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      K = jj_consume_token(ATOM);
      break;
    case TK_BEGIN:
      K = jj_consume_token(TK_BEGIN);
      break;
    case TK_END:
      K = jj_consume_token(TK_END);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                       p = new Pred(K.image);
                       p.setSrcInfo(new SourceInfo(source,K.beginLine));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      l = terms();
      jj_consume_token(34);
                      p.addTerms(l);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      lt = list();
                      p.setAnnots(lt);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {
                 List listTerms = new ArrayList(); Term v;
    v = term();
                         listTerms.add(v);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(35);
      v = term();
                         listTerms.add(v);
    }
                         {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
                      Term u; Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
      u = literal();
                      Literal l = (Literal)u;
                      if (l.isAtom() && !l.negated()) {
                         Atom a = new Atom(l.getFunctor());
                         a.setSrcInfo(new SourceInfo(source,l.getSrcInfo().getSrcLine()));
                         {if (true) return a;}
                      }
      break;
    case 36:
      u = list();
      break;
    case VAR:
    case NUMBER:
    case UNNAMEDVAR:
    case 40:
      o = arithm_expr();
                      {if (true) return (Term)o;}
      break;
    case STRING:
      u = string();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public ListTermImpl list() throws ParseException {
                        ListTermImpl lt = new ListTermImpl(); ListTerm last;
                        Token K; Term f;
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 36:
    case 40:
      f = term();
                            last = lt.append(f);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(35);
        f = term();
                            last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                            last.setNext(new VarTerm(K.image));
          break;
        case UNNAMEDVAR:
          K = jj_consume_token(UNNAMEDVAR);
                            last.setNext(new UnnamedVar());
          break;
        case 36:
          f = list();
                            last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(38);
                            {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

/* arithmetic expression */
  final public Object arithm_expr() throws ParseException {
                                Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
                                op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        jj_consume_token(39);
                                op = ArithmeticOp.plus;
        break;
      case 40:
        jj_consume_token(40);
                                op = ArithmeticOp.minus;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr();
                                if (!(t1 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException("ArithExpr: first operand is not numeric or variable.");}
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException("ArithExpr: second operand is not numeric or variable.");}
                                }
                                {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                                {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_trm() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_INTDIV:
    case TK_INTMOD:
    case 41:
    case 42:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
                                  op = ArithmeticOp.times;
        break;
      case 42:
        jj_consume_token(42);
                                  op = ArithmeticOp.div;
        break;
      case TK_INTDIV:
        jj_consume_token(TK_INTDIV);
                                  op = ArithmeticOp.intdiv;
        break;
      case TK_INTMOD:
        jj_consume_token(TK_INTMOD);
                                  op = ArithmeticOp.mod;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithTerm: first operand is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithTerm: second operand is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_factor() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
                                  op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithFactor: first operand is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithFactor: second operand is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_simple() throws ParseException {
                                  Token K; Object t; VarTerm v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      K = jj_consume_token(NUMBER);
                                  {if (true) return new NumberTermImpl(K.image);}
      break;
    case 40:
      jj_consume_token(40);
      t = arithm_expr_simple();
                                  if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("operator '-' applied to argument not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);}
      break;
    case VAR:
    case UNNAMEDVAR:
      v = var();
                                  {if (true) return v;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var() throws ParseException {
                      Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      K = jj_consume_token(VAR);
                      v = new VarTerm(K.image); v.setSrcInfo(new SourceInfo(source,K.beginLine));
      break;
    case UNNAMEDVAR:
      K = jj_consume_token(UNNAMEDVAR);
                      v = new UnnamedVar();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      lt = list();
                      v.setAnnots(lt);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
                      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {
                      Token k;
    k = jj_consume_token(STRING);
                      {if (true) return new StringTermImpl(k.image.substring(1,k.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  public PlannerParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x10000,0x0,0x200cb00,0x800,0x200cb00,0x200c000,0x0,0x0,0x0,0x740cb80,0x0,0x4000080,0x0,0x740cb80,0x0,0x0,0x3000,0x3000,0x0,0x4400080,0x4000080,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x8,0x0,0x0,0x0,0x0,0x2,0x10,0x8,0x110,0x8,0x10,0x20,0x110,0x180,0x180,0x600,0x600,0x800,0x100,0x0,0x10,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PlannerParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PlannerParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlannerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PlannerParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlannerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PlannerParser(PlannerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PlannerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[44];
    for (int i = 0; i < 44; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
